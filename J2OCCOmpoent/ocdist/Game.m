//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/dfg/Desktop/j2oc/j2ObjcCompoent/J2OCCOmpoent/java/src/Othello/Engine/Game.java
//

#include "Game.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Move.h"
#include "Position.h"
#include "Score.h"

#if !__has_feature(objc_arc)
#error "Game must be compiled with ARC (-fobjc-arc)"
#endif

@interface JOEGame () {
 @public
  IOSObjectArray *m_positions_;
  jint m_movenumber_;
}

@end

J2OBJC_FIELD_SETTER(JOEGame, m_positions_, IOSObjectArray *)

#line 1 "/Users/dfg/Desktop/j2oc/j2ObjcCompoent/J2OCCOmpoent/java/src/Othello/Engine/Game.java"


#line 18
@implementation JOEGame

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 27
- (instancetype)init {
  JOEGame_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 39
- (void)Reset {
  
#line 41
  m_positions_ = [IOSObjectArray newArrayWithLength:61 type:JOEPosition_class_()];
  (void) IOSObjectArray_SetAndConsume(m_positions_, 0, new_JOEPosition_init());
  m_movenumber_ = 0;
}


#line 52
- (jboolean)MakeMoveWithJOEMove:(JOEMove *)m {
  
#line 54
  if ([((JOEMove *) nil_chk(m)) GetPlayer] == JOEScore_NOBODY) return false;
  if ([self GetWhoseTurn] != [m GetPlayer]) return false;
  if (![((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), m_movenumber_))) MoveIsLegalWithJOEMove:m]) return false;
  
#line 58
  (void) IOSObjectArray_SetAndConsume(nil_chk(m_positions_), m_movenumber_ + 1, new_JOEPosition_initWithJOEPosition_withJOEMove_(IOSObjectArray_Get(m_positions_, m_movenumber_), m));
  m_movenumber_++;
  
#line 61
  return true;
}


#line 69
- (jboolean)TakeBackMove {
  
#line 71
  if (m_movenumber_ <= 0) return false;
  
#line 73
  (void) IOSObjectArray_Set(nil_chk(m_positions_), m_movenumber_--, nil);
  
#line 75
  return true;
}


#line 84
- (jint)GetSquareWithInt:(jint)x
                 withInt:(jint)y {
  return [((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), m_movenumber_))) GetSquareWithInt:x withInt:y];
}


#line 94
- (jint)GetScoreWithInt:(jint)player {
  
#line 96
  return [((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), m_movenumber_))) GetScoreWithInt:player];
}


#line 104
- (JOEMove *)GetLastMove {
  
#line 104
  return [((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), m_movenumber_))) GetLastMove];
}


#line 111
- (JOEMove *)GetMoveWithInt:(jint)i {
  
#line 113
  if (i <= 0 || i > m_movenumber_) return nil;
  
#line 115
  return [((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), i))) GetLastMove];
}


#line 123
- (jboolean)MoveIsLegalWithJOEMove:(JOEMove *)m {
  
#line 125
  return [((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), m_movenumber_))) MoveIsLegalWithJOEMove:m];
}


#line 133
- (jboolean)MoveIsPossibleWithInt:(jint)player {
  
#line 135
  return [((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), m_movenumber_))) MoveIsPossibleWithInt:player];
}


#line 143
- (jboolean)MoveIsAtAllPossible {
  
#line 145
  return [((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), m_movenumber_))) MoveIsAtAllPossible];
}


#line 153
- (jint)GetMoveNumber {
  
#line 153
  return m_movenumber_;
}


#line 161
- (jint)GetWhoseTurn {
  
#line 163
  if (m_movenumber_ <= 0) return JOEScore_BLACK;
  
#line 165
  jint player = [((JOEMove *) nil_chk([self GetLastMove])) GetPlayer];
  jint opponent = JOEScore_GetOpponentWithInt_(player);
  
#line 168
  if ([self MoveIsPossibleWithInt:opponent]) return opponent;
  
#line 170
  if ([self MoveIsPossibleWithInt:player]) return player;
  
#line 172
  return JOEScore_NOBODY;
}


#line 183
- (IOSObjectArray *)TurnedByLastMove {
  
#line 185
  if (m_movenumber_ <= 0) return [IOSObjectArray newArrayWithLength:0 type:JOEMove_class_()];
  
#line 187
  JOEMove *lastmove = [self GetLastMove];
  IOSObjectArray *m = [IOSObjectArray newArrayWithLength:28 type:JOEMove_class_()];
  jint n = 0;
  
#line 191
  (void) IOSObjectArray_SetAndConsume(m, n++, new_JOEMove_initWithJOEMove_(lastmove));
  
#line 193
  for (jint i = 1; i < 9; i++)
#line 194
  for (jint j = 1; j < 9; j++)
#line 195
  if ((i != [((JOEMove *) nil_chk(lastmove)) GetX] || j != [lastmove GetY]) &&
#line 196
  [((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), m_movenumber_))) GetSquareWithInt:i withInt:j] !=
#line 197
  [((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), m_movenumber_ - 1))) GetSquareWithInt:i withInt:j])
#line 198
  (void) IOSObjectArray_SetAndConsume(m, n++, new_JOEMove_initWithInt_withInt_withInt_(i, j, [lastmove GetPlayer]));
  
#line 200
  IOSObjectArray *retval = [IOSObjectArray newArrayWithLength:n type:JOEMove_class_()];
  
#line 202
  for (jint i = 0; i < n; i++) (void) IOSObjectArray_SetAndConsume(retval, i, new_JOEMove_initWithJOEMove_(IOSObjectArray_Get(m, i)));
  
#line 204
  return retval;
}


#line 212
- (jboolean)IdenticalWithJOEGame:(JOEGame *)g {
  
#line 214
  if (m_movenumber_ != ((JOEGame *) nil_chk(g))->m_movenumber_) return false;
  
#line 216
  for (jint i = 1; i < m_movenumber_; i++)
#line 217
  if ([((JOEMove *) nil_chk([((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), i))) GetLastMove])) GetX] !=
#line 218
  [((JOEMove *) nil_chk([((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(g->m_positions_), i))) GetLastMove])) GetX] ||
#line 219
  [((JOEMove *) nil_chk([((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(m_positions_), i))) GetLastMove])) GetY] !=
#line 220
  [((JOEMove *) nil_chk([((JOEPosition *) nil_chk(IOSObjectArray_Get(nil_chk(g->m_positions_), i))) GetLastMove])) GetY])
#line 221
  return false;
  
#line 223
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJOEMove;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJOEMove;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJOEMove;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(Reset);
  methods[2].selector = @selector(MakeMoveWithJOEMove:);
  methods[3].selector = @selector(TakeBackMove);
  methods[4].selector = @selector(GetSquareWithInt:withInt:);
  methods[5].selector = @selector(GetScoreWithInt:);
  methods[6].selector = @selector(GetLastMove);
  methods[7].selector = @selector(GetMoveWithInt:);
  methods[8].selector = @selector(MoveIsLegalWithJOEMove:);
  methods[9].selector = @selector(MoveIsPossibleWithInt:);
  methods[10].selector = @selector(MoveIsAtAllPossible);
  methods[11].selector = @selector(GetMoveNumber);
  methods[12].selector = @selector(GetWhoseTurn);
  methods[13].selector = @selector(TurnedByLastMove);
  methods[14].selector = @selector(IdenticalWithJOEGame:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "m_positions_", "[LJOEPosition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_movenumber_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "MakeMove", "LJOEMove;", "GetSquare", "II", "GetScore", "I", "GetMove", "MoveIsLegal", "MoveIsPossible", "Identical", "LJOEGame;" };
  static const J2ObjcClassInfo _JOEGame = { "Game", "Othello.Engine", ptrTable, methods, fields, 7, 0x1, 15, 2, -1, -1, -1, -1, -1 };
  return &_JOEGame;
}

@end


#line 27
void JOEGame_init(JOEGame *self) {
  NSObject_init(self);
  self->m_positions_ = [IOSObjectArray newArrayWithLength:61 type:JOEPosition_class_()];
  (void) IOSObjectArray_SetAndConsume(self->m_positions_, 0, new_JOEPosition_init());
  self->m_movenumber_ = 0;
}


#line 27
JOEGame *new_JOEGame_init() {
  J2OBJC_NEW_IMPL(JOEGame, init)
}


#line 27
JOEGame *create_JOEGame_init() {
  J2OBJC_CREATE_IMPL(JOEGame, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JOEGame)

J2OBJC_NAME_MAPPING(JOEGame, "Othello.Engine", "JOE")
