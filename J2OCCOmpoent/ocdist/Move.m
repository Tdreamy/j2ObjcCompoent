//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/dfg/Desktop/j2oc/j2ObjcCompoent/J2OCCOmpoent/java/src/Othello/Engine/Move.java
//

#include "J2ObjC_source.h"
#include "Move.h"

#if !__has_feature(objc_arc)
#error "Move must be compiled with ARC (-fobjc-arc)"
#endif

@interface JOEMove () {
 @public
  jint m_x_;
  jint m_y_;
  jint m_player_;
}

@end

#line 1 "/Users/dfg/Desktop/j2oc/j2ObjcCompoent/J2OCCOmpoent/java/src/Othello/Engine/Move.java"


#line 15
@implementation JOEMove


#line 20
- (instancetype)initWithJOEMove:(JOEMove *)m {
  JOEMove_initWithJOEMove_(self, m);
  return self;
}


#line 21
- (instancetype)initWithInt:(jint)x
                    withInt:(jint)y
                    withInt:(jint)player {
  JOEMove_initWithInt_withInt_withInt_(self, x, y, player);
  return self;
}


#line 23
- (jint)GetX {
  
#line 23
  return m_x_;
}


#line 24
- (jint)GetY {
  
#line 24
  return m_y_;
}


#line 25
- (jint)GetPlayer {
  
#line 25
  return m_player_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJOEMove:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:);
  methods[2].selector = @selector(GetX);
  methods[3].selector = @selector(GetY);
  methods[4].selector = @selector(GetPlayer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "m_x_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_y_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_player_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJOEMove;", "III" };
  static const J2ObjcClassInfo _JOEMove = { "Move", "Othello.Engine", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_JOEMove;
}

@end


#line 20
void JOEMove_initWithJOEMove_(JOEMove *self, JOEMove *m) {
  NSObject_init(self);
  
#line 20
  self->m_x_ = ((JOEMove *) nil_chk(m))->m_x_;
  
#line 20
  self->m_y_ = m->m_y_;
  
#line 20
  self->m_player_ = m->m_player_;
}


#line 20
JOEMove *new_JOEMove_initWithJOEMove_(JOEMove *m) {
  J2OBJC_NEW_IMPL(JOEMove, initWithJOEMove_, m)
}


#line 20
JOEMove *create_JOEMove_initWithJOEMove_(JOEMove *m) {
  J2OBJC_CREATE_IMPL(JOEMove, initWithJOEMove_, m)
}


#line 21
void JOEMove_initWithInt_withInt_withInt_(JOEMove *self, jint x, jint y, jint player) {
  NSObject_init(self);
  
#line 21
  self->m_x_ = x;
  
#line 21
  self->m_y_ = y;
  
#line 21
  self->m_player_ = player;
}


#line 21
JOEMove *new_JOEMove_initWithInt_withInt_withInt_(jint x, jint y, jint player) {
  J2OBJC_NEW_IMPL(JOEMove, initWithInt_withInt_withInt_, x, y, player)
}


#line 21
JOEMove *create_JOEMove_initWithInt_withInt_withInt_(jint x, jint y, jint player) {
  J2OBJC_CREATE_IMPL(JOEMove, initWithInt_withInt_withInt_, x, y, player)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JOEMove)

J2OBJC_NAME_MAPPING(JOEMove, "Othello.Engine", "JOE")
