//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/dfg/Desktop/j2oc/j2ObjcCompoent/J2OCCOmpoent/java/src/Othello/Engine/CommandInterface.java
//

#include "CommandInterface.h"
#include "CommandInterfaceListener.h"
#include "Engine.h"
#include "Game.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Move.h"
#include "Score.h"
#include "java/lang/Thread.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "CommandInterface must be compiled with ARC (-fobjc-arc)"
#endif

@interface JOECommandInterface () {
 @public
  jint m_last_entered_move_score_;
  jboolean m_calculating_;
  JOEEngine *m_Engine_;
  JOEGame *m_Game_;
}

@end

J2OBJC_FIELD_SETTER(JOECommandInterface, m_Engine_, JOEEngine *)
J2OBJC_FIELD_SETTER(JOECommandInterface, m_Game_, JOEGame *)

inline JavaUtilLoggingLogger *JOECommandInterface_get_log(void);
static JavaUtilLoggingLogger *JOECommandInterface_log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JOECommandInterface, log, JavaUtilLoggingLogger *)

#line 1 "/Users/dfg/Desktop/j2oc/j2ObjcCompoent/J2OCCOmpoent/java/src/Othello/Engine/CommandInterface.java"

J2OBJC_INITIALIZED_DEFN(JOECommandInterface)


#line 16
@implementation JOECommandInterface

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 20
- (instancetype)init {
  JOECommandInterface_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)run {
  
#line 30
  JOEMove *move = [((JOEEngine *) nil_chk(m_Engine_)) ComputeMoveWithJOEGame:m_Game_];
  
#line 32
  if (move != nil)
#line 33
  [((JOEGame *) nil_chk(m_Game_)) MakeMoveWithJOEMove:move];
  
#line 35
  m_calculating_ = false;
  
#line 37
  id<JOECommandInterfaceListener> tmpListener = m_Listener_;
  m_Listener_ = nil;
  
#line 41
  [((id<JOECommandInterfaceListener>) nil_chk(tmpListener)) ComputationFinishedWithJOEMove:move];
}


#line 45
- (jint)GetSquareWithInt:(jint)x
                 withInt:(jint)y {
  return [((JOEGame *) nil_chk(m_Game_)) GetSquareWithInt:x withInt:y];
}


#line 51
- (jint)GetScoreWhite {
  
#line 53
  return [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_WHITE];
}

- (jint)GetScoreBlack {
  
#line 59
  return [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_BLACK];
}

- (jint)GetLevel {
  
#line 65
  return [((JOEEngine *) nil_chk(m_Engine_)) GetStrength];
}

- (jint)GetWhoseTurn {
  
#line 71
  return [((JOEGame *) nil_chk(m_Game_)) GetWhoseTurn];
}

- (NSString *)GetLastMove {
  
#line 77
  if ([((JOEGame *) nil_chk(m_Game_)) GetLastMove] == nil) return nil;
  
#line 79
  IOSCharArray *ch = [IOSCharArray newArrayWithLength:1];
  *IOSCharArray_GetRef(ch, 0) = (jchar) ('A' + [((JOEMove *) nil_chk([((JOEGame *) nil_chk(m_Game_)) GetLastMove])) GetX] - 1);
  
#line 82
  NSString *returnvalue = [NSString java_stringWithCharacters:ch];
  
#line 84
  return JreStrcat("$I", returnvalue, [((JOEMove *) nil_chk([((JOEGame *) nil_chk(m_Game_)) GetLastMove])) GetY]);
}


#line 88
- (jboolean)MoveIsPossible {
  
#line 90
  if (m_calculating_) return false;
  
#line 92
  return [((JOEGame *) nil_chk(m_Game_)) GetWhoseTurn] != JOEScore_NOBODY;
}


#line 96
- (void)ComputeMoveWithJOECommandInterfaceListener:(id<JOECommandInterfaceListener>)Listener {
  
#line 98
  m_Listener_ = Listener;
  
#line 100
  m_calculating_ = true;
  
#line 102
  JavaLangThread *thread = new_JavaLangThread_initWithJavaLangRunnable_(self);
  [thread setPriorityWithInt:JavaLangThread_MIN_PRIORITY];
  [thread start];
}


#line 108
- (jboolean)ComputeMoveIsPossible {
  
#line 110
  return !m_calculating_ && [((JOEGame *) nil_chk(m_Game_)) GetWhoseTurn] != JOEScore_NOBODY;
}

- (jboolean)MakeMoveWithInt:(jint)x
                    withInt:(jint)y {
  jboolean returnvalue = false;
  
#line 118
  if ([self MakeMoveIsPossibleWithInt:x withInt:y]) {
    
#line 120
    jint player = [((JOEGame *) nil_chk(m_Game_)) GetWhoseTurn];
    
#line 122
    m_last_entered_move_score_ =
#line 123
    [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_WHITE] + [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_BLACK];
    
#line 125
    JOEMove *m = new_JOEMove_initWithInt_withInt_withInt_(x, y, player);
    
#line 127
    if ([((JOEGame *) nil_chk(m_Game_)) MoveIsLegalWithJOEMove:m]) {
      
#line 129
      m_last_entered_move_score_ =
#line 130
      [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_WHITE] + [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_BLACK];
      
#line 132
      [((JOEGame *) nil_chk(m_Game_)) MakeMoveWithJOEMove:m];
      
#line 134
      returnvalue = true;
    }
  }
  
#line 138
  return returnvalue;
}


#line 142
- (jboolean)MakeMoveIsPossibleWithInt:(jint)x
                              withInt:(jint)y {
  if (m_calculating_) return false;
  
#line 146
  jint player = [((JOEGame *) nil_chk(m_Game_)) GetWhoseTurn];
  JOEMove *m = new_JOEMove_initWithInt_withInt_withInt_(x, y, player);
  
#line 149
  return [((JOEGame *) nil_chk(m_Game_)) MoveIsLegalWithJOEMove:m];
}


#line 153
- (void)Undo {
  
#line 155
  if ([self UndoIsPossible]) {
    
#line 157
    if (m_last_entered_move_score_ >= 4)
#line 158
    while ([((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_WHITE] + [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_BLACK] >
#line 159
    m_last_entered_move_score_) {
      
#line 161
      [((JOEGame *) nil_chk(m_Game_)) TakeBackMove];
    }
    
#line 164
    m_last_entered_move_score_ = 0;
  }
}


#line 169
- (jboolean)UndoIsPossible {
  
#line 171
  return !m_calculating_ && m_last_entered_move_score_ >= 4;
}

- (void)TakeBack {
  
#line 177
  if ([self TakeBackIsPossible]) {
    
#line 179
    [((JOEGame *) nil_chk(m_Game_)) TakeBackMove];
    
#line 181
    if ([((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_WHITE] + [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_BLACK] <= 4)
#line 182
    m_last_entered_move_score_ = 0;
    else
#line 184
    if ([((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_WHITE] + [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_BLACK] <=
#line 185
    m_last_entered_move_score_)
#line 186
    m_last_entered_move_score_ = 0;
  }
}


#line 191
- (jboolean)TakeBackIsPossible {
  
#line 193
  return !m_calculating_ &&
#line 194
  [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_WHITE] + [((JOEGame *) nil_chk(m_Game_)) GetScoreWithInt:JOEScore_BLACK] > 4;
}


#line 198
- (void)SetLevelWithInt:(jint)level {
  
#line 200
  if ([self SetLevelIsPossible])
#line 201
  [((JOEEngine *) nil_chk(m_Engine_)) SetStrengthWithInt:level];
}


#line 205
- (jboolean)SetLevelIsPossible {
  
#line 207
  return !m_calculating_;
}

- (void)NewGame {
  
#line 213
  if ([self NewGameIsPossible]) {
    
#line 215
    m_last_entered_move_score_ = 0;
    [((JOEGame *) nil_chk(m_Game_)) Reset];
  }
}


#line 221
- (jboolean)NewGameIsPossible {
  
#line 223
  return !m_calculating_;
}

- (void)InterruptComputation {
  
#line 229
  if ([self InterruptComputationIsPossible])
#line 230
  [((JOEEngine *) nil_chk(m_Engine_)) SetInterruptWithBoolean:true];
}


#line 234
- (jboolean)InterruptComputationIsPossible {
  
#line 236
  return m_calculating_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(GetSquareWithInt:withInt:);
  methods[3].selector = @selector(GetScoreWhite);
  methods[4].selector = @selector(GetScoreBlack);
  methods[5].selector = @selector(GetLevel);
  methods[6].selector = @selector(GetWhoseTurn);
  methods[7].selector = @selector(GetLastMove);
  methods[8].selector = @selector(MoveIsPossible);
  methods[9].selector = @selector(ComputeMoveWithJOECommandInterfaceListener:);
  methods[10].selector = @selector(ComputeMoveIsPossible);
  methods[11].selector = @selector(MakeMoveWithInt:withInt:);
  methods[12].selector = @selector(MakeMoveIsPossibleWithInt:withInt:);
  methods[13].selector = @selector(Undo);
  methods[14].selector = @selector(UndoIsPossible);
  methods[15].selector = @selector(TakeBack);
  methods[16].selector = @selector(TakeBackIsPossible);
  methods[17].selector = @selector(SetLevelWithInt:);
  methods[18].selector = @selector(SetLevelIsPossible);
  methods[19].selector = @selector(NewGame);
  methods[20].selector = @selector(NewGameIsPossible);
  methods[21].selector = @selector(InterruptComputation);
  methods[22].selector = @selector(InterruptComputationIsPossible);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "log", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "m_last_entered_move_score_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_calculating_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_Engine_", "LJOEEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_Game_", "LJOEGame;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_Listener_", "LJOECommandInterfaceListener;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "GetSquare", "II", "ComputeMove", "LJOECommandInterfaceListener;", "MakeMove", "MakeMoveIsPossible", "SetLevel", "I", &JOECommandInterface_log };
  static const J2ObjcClassInfo _JOECommandInterface = { "CommandInterface", "Othello.Engine", ptrTable, methods, fields, 7, 0x1, 23, 6, -1, -1, -1, -1, -1 };
  return &_JOECommandInterface;
}

+ (void)initialize {
  if (self == [JOECommandInterface class]) {
    JOECommandInterface_log = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 18
    [JOECommandInterface_class_() getName]);
    J2OBJC_SET_INITIALIZED(JOECommandInterface)
  }
}

@end


#line 20
void JOECommandInterface_init(JOECommandInterface *self) {
  NSObject_init(self);
  self->m_last_entered_move_score_ =
#line 240
  0;
  self->m_calculating_ = false;
  self->m_Engine_ = new_JOEEngine_init();
  self->m_Game_ = new_JOEGame_init();
  
#line 22
  [((JavaUtilLoggingLogger *) nil_chk(JOECommandInterface_log)) infoWithNSString:@"CommandInterface"];
}


#line 20
JOECommandInterface *new_JOECommandInterface_init() {
  J2OBJC_NEW_IMPL(JOECommandInterface, init)
}


#line 20
JOECommandInterface *create_JOECommandInterface_init() {
  J2OBJC_CREATE_IMPL(JOECommandInterface, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JOECommandInterface)

J2OBJC_NAME_MAPPING(JOECommandInterface, "Othello.Engine", "JOE")
